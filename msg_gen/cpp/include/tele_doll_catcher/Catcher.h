/* Auto-generated by genmsg_cpp for file /home/azureviolin/ros_workspace/bjmakerspace-ros-repo/tele_doll_catcher/msg/Catcher.msg */
#ifndef TELE_DOLL_CATCHER_MESSAGE_CATCHER_H
#define TELE_DOLL_CATCHER_MESSAGE_CATCHER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tele_doll_catcher
{
template <class ContainerAllocator>
struct Catcher_ {
  typedef Catcher_<ContainerAllocator> Type;

  Catcher_()
  : moveTLR(0)
  , moveTFB(0)
  , MOVE_RIGHT(false)
  , MOVE_FORWARD(false)
  , CATCH_OR_NOT(false)
  {
  }

  Catcher_(const ContainerAllocator& _alloc)
  : moveTLR(0)
  , moveTFB(0)
  , MOVE_RIGHT(false)
  , MOVE_FORWARD(false)
  , CATCH_OR_NOT(false)
  {
  }

  typedef int16_t _moveTLR_type;
  int16_t moveTLR;

  typedef int16_t _moveTFB_type;
  int16_t moveTFB;

  typedef uint8_t _MOVE_RIGHT_type;
  uint8_t MOVE_RIGHT;

  typedef uint8_t _MOVE_FORWARD_type;
  uint8_t MOVE_FORWARD;

  typedef uint8_t _CATCH_OR_NOT_type;
  uint8_t CATCH_OR_NOT;


private:
  static const char* __s_getDataType_() { return "tele_doll_catcher/Catcher"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0007f92c016629160356ca5642bbf6b7"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16 moveTLR\n\
int16 moveTFB\n\
bool MOVE_RIGHT \n\
bool MOVE_FORWARD\n\
bool CATCH_OR_NOT\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, moveTLR);
    ros::serialization::serialize(stream, moveTFB);
    ros::serialization::serialize(stream, MOVE_RIGHT);
    ros::serialization::serialize(stream, MOVE_FORWARD);
    ros::serialization::serialize(stream, CATCH_OR_NOT);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, moveTLR);
    ros::serialization::deserialize(stream, moveTFB);
    ros::serialization::deserialize(stream, MOVE_RIGHT);
    ros::serialization::deserialize(stream, MOVE_FORWARD);
    ros::serialization::deserialize(stream, CATCH_OR_NOT);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(moveTLR);
    size += ros::serialization::serializationLength(moveTFB);
    size += ros::serialization::serializationLength(MOVE_RIGHT);
    size += ros::serialization::serializationLength(MOVE_FORWARD);
    size += ros::serialization::serializationLength(CATCH_OR_NOT);
    return size;
  }

  typedef boost::shared_ptr< ::tele_doll_catcher::Catcher_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tele_doll_catcher::Catcher_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Catcher
typedef  ::tele_doll_catcher::Catcher_<std::allocator<void> > Catcher;

typedef boost::shared_ptr< ::tele_doll_catcher::Catcher> CatcherPtr;
typedef boost::shared_ptr< ::tele_doll_catcher::Catcher const> CatcherConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tele_doll_catcher::Catcher_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tele_doll_catcher::Catcher_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tele_doll_catcher

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tele_doll_catcher::Catcher_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tele_doll_catcher::Catcher_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tele_doll_catcher::Catcher_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0007f92c016629160356ca5642bbf6b7";
  }

  static const char* value(const  ::tele_doll_catcher::Catcher_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0007f92c01662916ULL;
  static const uint64_t static_value2 = 0x0356ca5642bbf6b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::tele_doll_catcher::Catcher_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tele_doll_catcher/Catcher";
  }

  static const char* value(const  ::tele_doll_catcher::Catcher_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tele_doll_catcher::Catcher_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 moveTLR\n\
int16 moveTFB\n\
bool MOVE_RIGHT \n\
bool MOVE_FORWARD\n\
bool CATCH_OR_NOT\n\
\n\
";
  }

  static const char* value(const  ::tele_doll_catcher::Catcher_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tele_doll_catcher::Catcher_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tele_doll_catcher::Catcher_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.moveTLR);
    stream.next(m.moveTFB);
    stream.next(m.MOVE_RIGHT);
    stream.next(m.MOVE_FORWARD);
    stream.next(m.CATCH_OR_NOT);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Catcher_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tele_doll_catcher::Catcher_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tele_doll_catcher::Catcher_<ContainerAllocator> & v) 
  {
    s << indent << "moveTLR: ";
    Printer<int16_t>::stream(s, indent + "  ", v.moveTLR);
    s << indent << "moveTFB: ";
    Printer<int16_t>::stream(s, indent + "  ", v.moveTFB);
    s << indent << "MOVE_RIGHT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MOVE_RIGHT);
    s << indent << "MOVE_FORWARD: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MOVE_FORWARD);
    s << indent << "CATCH_OR_NOT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CATCH_OR_NOT);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TELE_DOLL_CATCHER_MESSAGE_CATCHER_H

